services:
  postgres:
    image: pgvector/pgvector:pg16
    container_name: echolens-postgres
    env_file:
      - .env
    environment:
      POSTGRES_USER: echolens
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD_DEV}
      POSTGRES_DB: echolens
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - echolens_postgres_data:/var/lib/postgresql/data
      - ./migrations:/migrations  # Mount migrations for easy access
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U echolens"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - echolens-network

  redis:
    image: redis:7-alpine
    container_name: echolens-redis
    env_file:
      - .env
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD_DEV} --appendonly yes
    volumes:
      - echolens_redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD_DEV}", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - echolens-network

  adminer:
    image: adminer:latest
    container_name: echolens-adminer
    ports:
      - "${ADMINER_PORT:-8080}:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres
    networks:
      - echolens-network

  echolens-backend:
    build:
      context: .
      dockerfile: docker/backend/Dockerfile.dev
    container_name: echolens-backend
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    volumes:
      - ./app:/app/app
      - ./echolens_data:/app/echolens_data
      - ./task_logs:/app/task_logs
      - ./.env:/app/.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql+asyncpg://echolens:${POSTGRES_PASSWORD_DEV}@postgres:5432/echolens
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD_DEV}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD_DEV}@redis:6379/0
      - REDIS_URL=redis://:${REDIS_PASSWORD_DEV}@redis:6379/0
    restart: unless-stopped
    networks:
      - echolens-network

  celery-worker:
    build:
      context: .
      dockerfile: docker/backend/Dockerfile.dev
    container_name: echolens-celery-worker
    command: sh -c ". .venv/bin/activate && celery -A app.celery_app worker --loglevel=info --concurrency=${CELERY_WORKER_CONCURRENCY:-2}"
    volumes:
      - ./app:/app/app
      - ./echolens_data:/app/echolens_data
      - ./task_logs:/app/task_logs
      - ./.env:/app/.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql+asyncpg://echolens:${POSTGRES_PASSWORD_DEV}@postgres:5432/echolens
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD_DEV}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD_DEV}@redis:6379/0
    restart: unless-stopped
    networks:
      - echolens-network

  celery-beat:
    build:
      context: .
      dockerfile: docker/backend/Dockerfile.dev
    container_name: echolens-celery-beat
    command: sh -c ". .venv/bin/activate && celery -A app.celery_app beat --loglevel=info"
    volumes:
      - ./app:/app/app
      - ./.env:/app/.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql+asyncpg://echolens:${POSTGRES_PASSWORD_DEV}@postgres:5432/echolens
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD_DEV}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD_DEV}@redis:6379/0
    restart: unless-stopped
    networks:
      - echolens-network

  echolens-frontend:
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile.dev
      args:
        NEXT_PUBLIC_API_URL: /api/proxy
    image: echolens-frontend:dev
    container_name: echolens-frontend
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    environment:
      - NEXT_PUBLIC_API_URL=/api/proxy
      - BACKEND_URL=http://echolens-backend:8000  # Internal backend URL for server-side proxy
    depends_on:
      - echolens-backend
    restart: unless-stopped
    networks:
      - echolens-network

volumes:
  echolens_postgres_data:
  echolens_redis_data:

networks:
  echolens-network:
    driver: bridge
