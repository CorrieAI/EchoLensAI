# ============================================================================
# PRODUCTION ENVIRONMENT CONFIGURATION
# ============================================================================
# This file contains production-ready settings with security hardening.
# Copy this to .env.prod and fill in your actual values before deploying.
#
# Usage:
#   cp .env.prod.example .env.prod
#   # Edit .env.prod with your actual values
#   docker compose -f docker-compose.yaml up -d
#
# Note: docker-compose.yaml uses .env.prod (production settings)
#       docker-compose.dev.yaml uses .env (development settings)

# ============================================================================
# CRITICAL SECURITY SETTINGS (MUST CHANGE)
# ============================================================================

# Session Secret - MUST be a long random string (generate with command below)
# Generate with: python -c "import secrets; print(secrets.token_urlsafe(32))"
SESSION_SECRET_KEY=CHANGE_THIS_TO_LONG_RANDOM_STRING

# Session Cookie Security - MUST be true for HTTPS/SSL
SESSION_COOKIE_SECURE=true
SESSION_COOKIE_HTTPONLY=true
SESSION_COOKIE_SAMESITE=lax

# Debug Mode - MUST be false in production (hides error details)
DEBUG_MODE=false

# CORS Origins - Replace with your actual domain(s)
# For multiple domains, use comma-separated: https://app.example.com,https://www.example.com
CORS_ORIGINS=https://yourdomain.com

# Frontend URL - Replace with your actual domain
FRONTEND_URL=https://yourdomain.com

# Production Database & Redis Passwords - MUST use strong passwords
# Generate strong passwords with: python -c "import secrets; print(secrets.token_urlsafe(32))"
POSTGRES_PASSWORD=CHANGE_THIS_TO_STRONG_RANDOM_PASSWORD
REDIS_PASSWORD=CHANGE_THIS_TO_STRONG_RANDOM_PASSWORD

# ============================================================================
# REQUIRED: AI Service Configuration
# ============================================================================

# --- CHAT MODEL (for summaries, term extraction, chat responses) ---
# Groq is recommended for speed and cost
CHAT_API_KEY=your_chat_api_key_here
CHAT_API_BASE=https://api.groq.com/openai/v1
CHAT_MODEL=openai/gpt-oss-120b
CHAT_STREAMING=true
CHAT_TEMPERATURE=0.5
CHAT_MAX_TOKENS=65000

# --- EMBEDDING MODEL (for vector search) ---
# Note: Groq doesn't support embeddings - must use OpenAI or Ollama
EMBEDDING_API_KEY=your_embedding_api_key_here
EMBEDDING_API_BASE=
EMBEDDING_MODEL=text-embedding-3-small
EMBEDDING_DIMENSIONS=1536

# --- TRANSCRIPTION MODEL (Speech-to-Text / Whisper) ---
# Groq is recommended for speed and cost
TRANSCRIPTION_API_KEY=your_transcription_api_key_here
TRANSCRIPTION_API_BASE=https://api.groq.com/openai/v1
TRANSCRIPTION_MODEL=whisper-large-v3-turbo

# --- TEXT-TO-SPEECH (Optional) ---
TTS_ENABLED=false
TTS_API_KEY=your_tts_api_key_here
TTS_API_BASE=
TTS_MODEL=tts-1
TTS_VOICE=alloy

# ============================================================================
# Database & Redis Configuration (For Docker Production)
# ============================================================================

# Database - Docker production setup (internal networking)
DATABASE_URL=postgresql+asyncpg://echolens:${POSTGRES_PASSWORD}@postgres:5432/echolens

# Redis - Docker production setup (internal networking)
REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD}@redis:6379/0

# ============================================================================
# Optional: Performance & System Settings
# ============================================================================

# Celery worker concurrency (2-4 recommended)
CELERY_WORKER_CONCURRENCY=2

# Timezone for display/logging
TIMEZONE=UTC

# File Storage
UPLOAD_DIR=./echolens_data/uploads
MAX_UPLOAD_SIZE=524288000

# Audio processing
KEEP_AUDIO_CHUNKS=false

# ============================================================================
# Port Configuration (Only Frontend Exposed)
# ============================================================================
# In production, only the frontend port should be exposed
# Backend, database, and redis are accessed via internal Docker networking

# Frontend port (will be behind Nginx Proxy Manager)
# Bind to localhost only for extra security: 127.0.0.1:3000:3000
FRONTEND_PORT=3000

# Backend, Postgres, Redis ports (NOT exposed in production docker-compose.yaml)
# These are for development only and should NOT be set in production

# ============================================================================
# Production Deployment Checklist
# ============================================================================

# STEP 1: Create .env.prod from this example file
# ✅ cp .env.prod.example .env.prod

# STEP 2: Update all security settings in .env.prod
# ✅ SESSION_SECRET_KEY is set to a long random string (NOT the default)
# ✅ SESSION_COOKIE_SECURE is set to true
# ✅ DEBUG_MODE is set to false
# ✅ CORS_ORIGINS is set to your actual domain(s)
# ✅ FRONTEND_URL is set to your actual domain
# ✅ POSTGRES_PASSWORD is a strong random password (NOT "change_this_in_production")
# ✅ REDIS_PASSWORD is a strong random password (NOT "change_this_in_production")
# ✅ All API keys are valid and working

# STEP 3: Verify infrastructure setup
# ✅ Firewall allows only ports 80, 443, and SSH
# ✅ Nginx Proxy Manager is configured with SSL certificate
# ✅ Frontend port is bound to localhost only (127.0.0.1:3000:3000 in docker-compose.yaml)

# STEP 4: Deploy with production compose file
# ✅ docker compose -f docker-compose.yaml up -d
#    (This will automatically use .env.prod, NOT .env)

# ============================================================================
# Additional Security Recommendations
# ============================================================================

# 1. Rate Limiting: Consider adding slowapi to limit login attempts and API abuse
# 2. Backups: Set up automated database and file backups
# 3. Monitoring: Set up log aggregation and error monitoring
# 4. Updates: Keep dependencies up to date with `uv sync --upgrade`
# 5. SSL: Use Let's Encrypt via Nginx Proxy Manager for free SSL certificates
# 6. SSH: Use SSH keys instead of passwords, disable root login
# 7. Firewall: Use UFW or similar to restrict access to only necessary ports
